<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-18T12:21:59+02:00</updated><id>http://localhost:4000/</id><title type="html">Anwar El-Wakil</title><subtitle>A JOURNEY THROUGH MY THOUGHTS</subtitle><entry><title type="html">How to balance between quick feedback and quality?</title><link href="http://localhost:4000/Quality-for-startups" rel="alternate" type="text/html" title="How to balance between quick feedback and quality?" /><published>2020-06-15T00:00:00+02:00</published><updated>2020-06-15T00:00:00+02:00</updated><id>http://localhost:4000/Quality-for-startups</id><content type="html" xml:base="http://localhost:4000/Quality-for-startups">&lt;p&gt;Do you sometimes wonder how to balance quality and rapid feedback? This is a common problem where most startups stumble upon. In the early stages, a start-up is in great need of quick feedback to validate their ideas. Sooner then later it becomes very clear that first impressions and quality are crucial to keeping the customer engaged and willing to keep using the product in its early stages. Let’s dig deeper into this topic and think together of ideas on how to balance this hard equation.&lt;/p&gt;

&lt;p&gt;With the spread of the lean startup methodology, startups focus on using as few resources as possible to develop a minimum viable product. First, because the entrepreneur cannot afford to spend a large number of resources. Secondly, because the entrepreneur still has not reached a product-market fit. While this is a logical method for early startups especially when feedback is needed. However, let’s build a case for the importance of quality in the early stages of a startup.&lt;/p&gt;

&lt;p&gt;Note: While this article is written for startups running a software product, its key ideas would be relevant to all product building startups.&lt;/p&gt;

&lt;h2 id=&quot;why-you-should-consider-quality-for-your-product&quot;&gt;Why you should consider quality for your product?&lt;/h2&gt;

&lt;h3 id=&quot;first-impressions-matter&quot;&gt;First Impressions Matter:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You need to build a good first impression in terms of quality, service, and support. According to some &lt;a href=&quot;https://www.techrepublic.com/article/digital-transformation-reality-80-of-customers-delete-apps-that-dont-meet-expectations/#:~:text=The%20study%20shows%20that%2060,that%20many%20companies%20are%20doing.&quot;&gt;studies&lt;/a&gt;, up to 80% of users abandon using an app or website after a single usage. This number is super scary especially if you plan to collect a lot of feedback. Users who abandon your product will not be keen on sending feedback.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You need to focus on earning your users’ trust. This needs to be achieved with a great first impression. This helps keep your users engaged and willing to use new updated versions of your product, also more willing to provide feedback.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;financial-loss-or-gain&quot;&gt;Financial Loss or Gain:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Your product is more than likely going to include some flows which help generate revenue. If any of those flows contains an error or a bug, you have lost your self some crucial sales. It is estimated that losses from software failures accumulate to &lt;a href=&quot;https://www.tricentis.com/resources/software-fail-watch-5th-edition/&quot;&gt;17 trillion dollars per year&lt;/a&gt;. While this is a number that is hard to grasp, trust me you do not want to be one of the startups who lose money or even worse, fail due to some lousy error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-can-you-embed-quality-within-your-startup&quot;&gt;How can you embed quality within your startup?&lt;/h2&gt;

&lt;p&gt;Based on your resources and willingness to integrate quality within your startups, here are your options in order.&lt;/p&gt;

&lt;h3 id=&quot;hire-someone-within-the-team-to-focus-on-quality&quot;&gt;Hire someone within the team to focus on quality:&lt;/h3&gt;

&lt;p&gt;Optimally hire someone whose main focus is quality within your team. It is extremely healthy to have strong bias forces within your organization. Each force would push towards one end of the spectrum including delivery, scalability, and quality, eventually balancing the equation. In an optimal scenario, we will have the product team pushing towards delivery, the development team pushing towards scalability, and finally, the quality team pushing towards quality. Once all three forces are empowered, the result would be a well-balanced product in terms of speed, maintainability, and quality.&lt;/p&gt;

&lt;h3 id=&quot;build-a-quality-culture&quot;&gt;Build a quality culture:&lt;/h3&gt;

&lt;p&gt;Your second option would be to build a quality culture allowing your team to wear the quality hat. While this is hard to achieve, it is necessary even if you have a quality team on board. This essentially means to empower the team to question everything from a quality perspective. How does the feature work? What could go wrong? What hypothetical scenarios could happen? Is the feature easy to use? Simply, training the team to ask these kinds of questions is a great way to improve quality.&lt;/p&gt;

&lt;p&gt;Training the team and yourself could also be achieved by hiring a quality team to ingrain the quality culture on a day-to-day basis. This can also be achieved through dedicated training by an experienced trainer who has deep experience with developing a quality culture.&lt;/p&gt;

&lt;p&gt;Bottomline while speed and feedback are crucial and necessary for a startup in its early days. However, ingraining some quality practices and developing a quality culture within the team and yourself is extremely important to build your users’ trust and engagement levels. Eventually, this will be translated into rich feedback and increased revenue.&lt;/p&gt;</content><author><name>Anwar El-Wakil</name></author><category term="thought-stream," /><category term="startups" /><summary type="html">Do you sometimes wonder how to balance quality and rapid feedback? This is a common problem where most startups stumble upon. In the early stages, a start-up is in great need of quick feedback to validate their ideas. Sooner then later it becomes very clear that first impressions and quality are crucial to keeping the customer engaged and willing to keep using the product in its early stages. Let’s dig deeper into this topic and think together of ideas on how to balance this hard equation.</summary></entry><entry><title type="html">Should a developer be trusted?</title><link href="http://localhost:4000/Trust-Developers" rel="alternate" type="text/html" title="Should a developer be trusted?" /><published>2020-06-13T12:18:00+02:00</published><updated>2020-06-13T12:18:00+02:00</updated><id>http://localhost:4000/Trust%20Developers</id><content type="html" xml:base="http://localhost:4000/Trust-Developers">&lt;p&gt;As a software quality control engineer should you trust a developer? Short answer, Yes! Now let us dig deeper into why trusting developers could lead to higher quality and faster delivery.&lt;/p&gt;

&lt;p&gt;A developer is a craftsman a skilled individual driven by passion. Most developers enjoy what they do for a living. To the extent that a lot of developers choose coding as their secondary hobby in their free time. They are proud of what they develop and set high-quality standards for their work. Nothing feels better than releasing new code that works well and meets the expectations of the user. The user here could be the customer, another software, or the developer who developed the code themselves. This is important to realize. This sets the intention of the developer as someone who wants to produce high-quality results.&lt;/p&gt;

&lt;p&gt;A quality control engineer’s main goal is to emphasize on producing high-quality results within a defined delivery timeline. This means that the developer’s and the QC’s intentions are aligned. Let’s get back to the main question “Should a developer be trusted?”. From my own experience trusting the developer is an essential tool for capitalizing on the well-formed intention of a skilled developer.&lt;/p&gt;

&lt;p&gt;A policed process and mistrust results in loss of passion for both sides. Passion is a crucial ingredient for quality. Our role as QC is not to police the developed work or be an indicator of the developer’s efficiency and level of performance. Our role is more of a support function. We are there to support the developer to deliver better results. The QC member is on the developers’ side and not on an opposing side. Together the developer and the QC share the same goal to deliver high-quality software on time. The intentions and motivation to do so is equal.&lt;/p&gt;

&lt;p&gt;What can you do as a QC member to capitalize on this mindset? Well, relax, a relaxed environment with less sense of urgency helps reduce panic. Panic never benefited quality. Be curious and develop questions early on. Remember your role is to support the developer. Your curiosity is needed to open up the horizon in front of the developer before they write a single line of code. Ask questions and dive into technical discussions to find answers and eradicate ambiguity. Unanswered questions and ambiguity are the main sources of issues and low quality. Trusting the developer to open up and take part in the discussions with pure intentions adds great clarity and transparency. Use this transparency to develop better questions and finding answers. You will know that you have achieved your goal when you have no more questions to ask and that the work that needs to be done now seems simple to implement.&lt;/p&gt;

&lt;p&gt;Leave plenty of space for creativity within an acceptable risk factor. Let’s agree that if we do not want the loss of quality the best thing we can do is stop developing altogether. Yet, the main goal is to keep developing with a lot of passion. Be open and flexible to new ideas and give the developer the space to be creative. Again our role is to support the developer to code with confidence. We are successful in our role when the developer is free of constraint and can do what they do best. Deliver Quality Code.&lt;/p&gt;

&lt;p&gt;Accept that there is a risk with change and work on reducing the risk by understanding the change and asking more questions. Next time you are on a project team up with the developer and use trust, curiosity, and questions to achieve your goal.&lt;/p&gt;

&lt;p&gt;I post these articles when they are still the first draft. I will be improving it and developing my ideas further. Please share with me your ideas and questions. This will help me with improving my content and sharing more from my experience. ♥️&lt;/p&gt;</content><author><name>Anwar El-Wakil</name></author><category term="thought-stream" /><summary type="html">As a software quality control engineer should you trust a developer? Short answer, Yes! Now let us dig deeper into why trusting developers could lead to higher quality and faster delivery.</summary></entry></feed>